X
X[,1,]
dim(X[,1,])
(X[,1,1])
dim(X[,1,1])
dim(X[,1,])
dim(X[1,1,])
X[1,1,]
GBMD <- function(M, N, d = n_stocks, t, mu, Sigma, X0){
X <- array(NA, dim = c(M, N + 1, d))
B <- t(chol(Sigma))
sigma <- matrix(diag(Sigma), ncol = 1, nrow = d)
muMat <- matrix(rep(mu, M), ncol = d, byrow = T)
dt <- t / N
## Initialize
X[,1,] <- 0
return(X)
## Run the simulation
for(i in 1:N){
Zmat <- matrix(rnorm(d * M), ncol = M)
X[,i + 1,] <- X[,i,] + muMat * dt + sqrt(dt) * t(B %*% Zmat)
}
return(x)
}
gbmd <- BMD(M = 1000, N = 256, t = 1, mu = mean_rets, Sigma = Sigma,
X0 = matrix(rets %>% select(-Date) %>% tail(1), ncol = 1, nrow = n_stocks) )
gbmd
GBMD <- function(M, N, d = n_stocks, t, mu, Sigma, X0){
X <- array(NA, dim = c(M, N + 1, d))
B <- t(chol(Sigma))
sigma <- matrix(diag(Sigma), ncol = 1, nrow = d)
muMat <- matrix(rep(mu, M), ncol = d, byrow = T)
dt <- t / N
## Initialize
X[,1,] <- 0
return(X)
## Run the simulation
for(i in 1:N){
Zmat <- matrix(rnorm(d * M), ncol = M)
X[,i + 1,] <- X[,i,] + muMat * dt + sqrt(dt) * t(B %*% Zmat)
}
return(x)
}
gbmd <- BMD(M = 1000, N = 256, t = 1, mu = mean_rets, Sigma = Sigma,
X0 = matrix(rets %>% select(-Date) %>% tail(1)) )
gbmd
dim(X[1,1,])
X[1,1,] <- matrix(rets %>% select(-Date) %>% tail(1))
X
mean_rets
mean_rets√•
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
Sigma
mu <- matrix(mean_rets, ncol = 1)
mu
mean_rets
0.25 * 0.25
Sigma
diag(Sigma)
diag(Sigma) ^1/2
sigma <- vector(diag(Sigma) ^1/2 )
sigma <- vector(diag(Sigma) ^1/2 )
sigma <- as.matix(diag(Sigma) ^1/2 )
sigma
sigma <- as.matrix(diag(Sigma) ^1/2 )
sigma
sigma <- as.matrix(diag(Sigma) ^1/2, nrow = 1 )
sigma
sigma <- as.matrix(diag(Sigma) ^1/2, ncol = n_stock, byrow = T)
sigma
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- X0
return(X0)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- X0
return(x)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- X0
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
dim(gmd)
gmd[,1,]
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- c(0, 1, 2, 3, 4, 5)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
dim(gmd)
gmd[,1,]
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), byrow = T)
return(X)
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), byrow = T)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
dim(gmd)
gmd[,1,]
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), ncol = 6,byrow = T)
return(X)
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), ncol = 6,byrow = T)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd
dim(gmd)
gmd[,1,]
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), ncol = 1)
return(X)
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(c(0, 1, 2, 3, 4, 5), ncol = 1)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd[,1,]
matrix(rep(c(1,2,3,4,5,6), 1000))
matrix(rep(c(1,2,3,4,5,6), 1000), ncol = 6, byrow = T)
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(rep(c(1,2,3,4,5,6), 1000), ncol = 6, byrow = T)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
0, sigma, Sigma)
gmd[,1,]
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
rets %>% select(-Date) %>% tail(1), sigma, Sigma)
gmd[,1,]
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(rep(X0, 1000), ncol = 6, byrow = T)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
rets %>% select(-Date) %>% tail(1), sigma, Sigma)
gmd[,1,]
GBMD <- function(M, N, d, t, mu, X0, sigma, Sigma){
## 3d x array for results
X <- array(NA, dim = c(M, N + 1, d))
## Initial Values = x0
X[,1,] <- matrix(rep(X0, 1000), ncol = 6, byrow = T)
return(X)
}
gmd <- GBMD(1000, 256, n_stocks, 1, mean_rets,
rets %>% select(-Date) %>% tail(1), sigma, Sigma)
gmd[,1,]
matrix(rep(c(1,2,3,4,5,6), 1000), ncol = 6, byrow = T)
matrix(rep(rets %>% select(-Date) %>% tail(1), 1000), ncol = 6, byrow = T)
gmd
X <- array(NA, dim = c(M, N + 1, d))
X[,1,] <- rep(rets %>% select(-Date) %>% tail(1), 100)
X <- array(NA, dim = c(10, 10,6))
X[,1,] <- rep(rets %>% select(-Date) %>% tail(1), 100)
X[,1,] <- matrix(rep(rets %>% select(-Date) %>% tail(1), 100), ncol = 6, byrow = T)
dim(matrix(rep(rets %>% select(-Date) %>% tail(1), 1000), ncol = 6, byrow = T))
dim(X[,1,])
X[,1,] <- matrix(rep(rets %>% select(-Date) %>% tail(1), 10), ncol = 6, byrow = T)
X
X[:,1,:] <- matrix(rep(rets %>% select(-Date) %>% tail(1), 10), ncol = 6, byrow = T)
X[1,1,]
X <- array(NA, dim = c(10, 10,6))
X[1,1,]
X[1,1,] <- matirx(rets %>% select(-Date) %>% tail(1))
X[1,1,] <- matrix(rets %>% select(-Date) %>% tail(1))
X
Geom_Brownian(M, N, d, t, mu, X0, Sigma){
X <- array(NA, dim = c(M, N + 1, d) )
## Set initial values = X0
X[,1,] <- X0
B <- t(chol(Sigma))
dt <- t/ N
muMat <- matrix(rep(mu -0.5 * diag(sigma) * diag(sigma), M),
ncol = d, byrow = T)
## Run the simulation
for(i in 1:N){
Zmat <- matrix(rnorm(d * M), ncol = M)
X[,i + 1,] <- X[,i] * exp(muMat * dt + sqrt(dt) * t(B %*% Zmat))
}
return(X)
}
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
X <- Geom_Brownian(M, N, d, t, mean_rets, 100, Sigma)
source('misc_funs.r')
source('misc_funs.r')
Geom_Brownian <- function(M, N, d, t, mu, X0, Sigma){
X <- array(NA, dim = c(M, N + 1, d) )
## Set initial values = X0
X[,1,] <- X0
B <- t(chol(Sigma))
dt <- t/ N
muMat <- matrix(rep(mu -0.5 * diag(sigma) * diag(sigma), M),
ncol = d, byrow = T)
## Run the simulation
for(i in 1:N){
Zmat <- matrix(rnorm(d * M), ncol = M)
X[,i + 1,] <- X[,i] * exp(muMat * dt + sqrt(dt) * t(B %*% Zmat))
}
return(X)
}
X <- Geom_Brownian(M, N, d, t, mean_rets, 100, Sigma)
Geom_Brownian <- function(M, N, d, t, mu, X0, Sigma){
X <- array(NA, dim = c(M, N + 1, d) )
## Set initial values = X0
X[,1,] <- X0
B <- t(chol(Sigma))
dt <- t/ N
muMat <- matrix(rep(mu -0.5 * diag(sigma) * diag(sigma), M),
ncol = d, byrow = T)
## Run the simulation
for(i in 1:N){
Zmat <- matrix(rnorm(d * M), ncol = M)
X[,i + 1,] <- X[,i,] * exp(muMat * dt + sqrt(dt) * t(B %*% Zmat))
}
return(X)
}
X <- Geom_Brownian(M, N, d, t, mean_rets, 100, Sigma)
X
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
X0 <- 100
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
X <- Geom_Brownian(M, N, d, t, mean_rets, X0, Sigma)
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
## Only works when start returns are at a arbritrary number
X0 <- 100
X <- Geom_Brownian(M, N, d, t, mean_rets, X0, Sigma)
X
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
## Only works when start returns are at a arbritrary number
X0 <- 100
gmd_model <- Geom_Brownian(M, N, d, t, mean_rets, X0, Sigma)
gmd_model
source('misc_funs.r')
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
## Only works when start returns are at a arbritrary number
X0 <- 100
gmd_model <- Geom_Brownian(M, N, d, t, mean_rets, X0, Sigma)
gmd_model
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## Find the mean and standard deviation
mean_rets<- matrix(Single_Moment(rets_moms, 'mean') %>%
t(), ncol  = 1)
mean_rets
var_rets <- Single_Moment(rets_moms, 'variance')
## Covariance Matrix
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
## Only works when start returns are at a arbritrary number
X0 <- 100
gmd_model <- Geom_Brownian(M, N, d, t, mean_rets, X0, Sigma)
rm(list = ls())
library(tidyverse)
library(Matrix)
library(plotly)
library(moments)
setwd("~/Desktop/msba/spring2021/fin_sim_comp_hedging_asset_pricing_model")
source('asset_price_model.r')
source('misc_funs.r')
## Read the data ####
n_stocks <- 6
prices <- Read_Data(n_stocks)
prices %>% head()
## Calculate Returns
rets <- Returns(prices)
## Look at the moments for the prices and the returns
price_moms <- Moments(prices)
price_moms
rets_moms <- Moments(rets)
rets_moms
## GMD Model
mean_rets <- Single_Moment(rets_moms, 'mean') %>%
t()
mu<- matrix(mean_rets, ncol  = 1)
Sigma <- var(rets %>% select(-Date), use = 'complete.obs')
rho <- cor(rets %>% select(-Date), use = 'complete.obs')
sigma <- var(rets %>% select(-Date), use = 'complete.obs')
M <- 100
N <- 252
d <- n_stocks
t <- 1
## Unable to start at appropriate starting prices
X0 <- rets %>% select(-Date) %>% tail(1)
## Only works when start returns are at a arbritrary number
X0 <- 100
gmd_model <- Geom_Brownian(M, N, d, t, mu, X0, Sigma)
